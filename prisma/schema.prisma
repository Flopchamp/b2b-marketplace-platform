generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  phone         String?
  password      String?
  role          UserRole       @default(RETAILER_USER)
  status        UserStatus     @default(PENDING_VERIFICATION)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  companyId     String?
  retailerId    String?
  notifications Notification[]
  orders        Order[]
  reviews       Review[]
  company       Company?       @relation(fields: [companyId], references: [id])
  retailer      Retailer?      @relation(fields: [retailerId], references: [id])
}

model Company {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  phone           String?
  website         String?
  description     String?
  logo            String?
  registrationNo  String?       @unique
  taxId           String?
  status          CompanyStatus @default(PENDING_VERIFICATION)
  isVerified      Boolean       @default(false)
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  businessType    String?
  yearEstablished Int?
  employeeCount   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]
  promotions      Promotion[]
  reviews         Review[]
  users           User[]
}

model Retailer {
  id              String         @id @default(cuid())
  businessName    String
  contactPerson   String?
  email           String         @unique
  phone           String?
  description     String?
  logo            String?
  businessLicense String?
  taxId           String?
  status          RetailerStatus @default(PENDING_VERIFICATION)
  isKYCVerified   Boolean        @default(false)
  creditScore     Int            @default(0)
  creditLimit     Float          @default(0)
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  businessType    String?
  yearEstablished Int?
  employeeCount   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  notifications   Notification[]
  orders          Order[]
  users           User[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  level       Int        @default(0)
  isActive    Boolean    @default(true)
  image       String?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
}

model Order {
  id               String               @id @default(cuid())
  orderNumber      String               @unique
  status           OrderStatus          @default(PENDING)
  paymentStatus    PaymentStatus        @default(PENDING)
  paymentMethod    PaymentMethod?
  subtotal         Float
  taxAmount        Float                @default(0)
  shippingAmount   Float                @default(0)
  discountAmount   Float                @default(0)
  totalAmount      Float
  shippingAddress  Json?
  billingAddress   Json?
  trackingNumber   String?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  orderDate        DateTime             @default(now())
  expectedDelivery DateTime?
  notes            String?
  internalNotes    String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  retailerId       String
  companyId        String
  userId           String
  company          Company              @relation(fields: [companyId], references: [id])
  retailer         Retailer             @relation(fields: [retailerId], references: [id])
  user             User                 @relation(fields: [userId], references: [id])
  items            OrderItem[]
  statusHistory    OrderStatusHistory[]
  payments         Payment[]
}

model OrderItem {
  id             String   @id @default(cuid())
  productId      String
  productName    String
  productSku     String
  quantity       Int
  unitPrice      Float
  discountAmount Float    @default(0)
  totalPrice     Float
  orderId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  order          Order    @relation(fields: [orderId], references: [id])
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("USD")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gatewayResponse Json?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id         String       @id @default(cuid())
  productId  String
  rating     Int
  title      String?
  comment    String?
  status     ReviewStatus @default(PENDING)
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     String
  companyId  String
  company    Company      @relation(fields: [companyId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

model Promotion {
  id                String             @id @default(cuid())
  name              String
  description       String?
  type              PromotionType
  value             Float
  minOrderAmount    Float?
  maxDiscountAmount Float?
  usageLimit        Int?
  usageCount        Int                @default(0)
  status            PromotionStatus    @default(DRAFT)
  validFrom         DateTime
  validTo           DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyId         String
  company           Company            @relation(fields: [companyId], references: [id])
  products          PromotionProduct[]
}

model PromotionProduct {
  id          String    @id @default(cuid())
  productId   String
  promotionId String
  createdAt   DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@unique([promotionId, productId])
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  title      String
  message    String
  isRead     Boolean          @default(false)
  actionUrl  String?
  createdAt  DateTime         @default(now())
  userId     String
  retailerId String?
  retailer   Retailer?        @relation(fields: [retailerId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
}

model CompanyAnalytics {
  id              String   @id @default(cuid())
  companyId       String   @unique
  period          String
  date            DateTime
  totalOrders     Int      @default(0)
  totalRevenue    Float    @default(0)
  totalProducts   Int      @default(0)
  activeRetailers Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([companyId, period, date])
}

model RetailerAnalytics {
  id                String   @id @default(cuid())
  retailerId        String   @unique
  period            String
  date              DateTime
  totalOrders       Int      @default(0)
  totalSpent        Float    @default(0)
  averageOrderValue Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([retailerId, period, date])
}

enum UserRole {
  SUPER_ADMIN
  COMPANY_ADMIN
  COMPANY_USER
  RETAILER_ADMIN
  RETAILER_USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum RetailerStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_PAID
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  MOBILE_MONEY
  CREDIT_LINE
  CHECK
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum PromotionStatus {
  DRAFT
  ACTIVE
  PAUSED
  EXPIRED
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT_STATUS
  INVENTORY_ALERT
  NEW_MESSAGE
  PROMOTION
  SYSTEM
}
